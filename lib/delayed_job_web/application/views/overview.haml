%h1
  Overview
%p.sub
  Jobs in the delayed_job queue.
%table.overview
  %tr
    %th Status
    %th Count
  %tr
    %td.status
      %a{:href => u('/enqueued')} Enqueued Jobs
    %td= delayed_job.count
  %tr
    %td.status
      %a{:href => u('/working')} Working Jobs
    %td= delayed_jobs(:working).count
  %tr
    %td.status
      %a{:href => u('/pending')} Pending Jobs
    %td= delayed_jobs(:pending).count
  %tr{:class => delayed_jobs(:failed).count > 0 ? 'failure' : ''}
    %td.status
      %a{:href => u('/failed')} Failed Jobs
    %td= delayed_jobs(:failed).count
%h1
  Queues
%p.sub
  Jobs by Queue
%table.overview
  %tr
    %th Queue
    %th Count
    %th Priority
    %th Working
    %th Pending
    %th Failed
  - queues.each do |q|
    %tr
      %td.status
        %a{:href => u("/queue/#{q}")}= "#{q.split("_").map(&:capitalize).join(" ")}"
      %td= delayed_job.where(:queue=>q).count
      %td= delayed_job.where(:queue=>q).select(:priority).map(&:priority).uniq.sort.join(", ")
      %td= delayed_job.where(:queue=>q).where("locked_at IS NOT NULL").count
      %td= delayed_job.where(:queue=>q).where("locked_at IS NULL AND last_error IS NULL").count
      %td{:style => "color:red;"}= delayed_job.where(:queue=>q).where("last_error IS NOT NULL").count
= poll
